"""
    updated donor/donation database implementation
       for Python 220 Lesson 7 assignment (relational databases)

    Database implementation using Peewee ORM, sqlite and Python
"""

import logging
from os import mkdir
from os.path import isdir
from peewee import SqliteDatabase, Model, CharField, DecimalField, ForeignKeyField, fn

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

database = SqliteDatabase(None)


class BaseModel(Model):
    class Meta:
        database = database

class Donor(BaseModel):
    name = CharField(primary_key=True)

class Donation(BaseModel):
    """
        This class defines a Donation.
        Implemented with a numeric PK that is generated by the system.
    """
    amount = DecimalField(max_digits=10, decimal_places=2)
    name = ForeignKeyField(Donor, related_name='donated_by', null=True)


    @classmethod
    def open_db(cls, filename):
        database.init(filename)
        database.connect()
        database.execute_sql('PRAGMA foreign_keys = ON;')


    @classmethod
    def list_donors(cls):
        query = Donor.select(Donor.name).distinct()
        return '\n'.join(['   '+str(donation.name) for donation in query])


    @classmethod
    def add_donation(cls, name, donation):
        Donor.get_or_create(name=name)
        Donation.create(name=name, amount=donation)


    @classmethod
    def thank_you_letter(cls, name):
        last_donation = Donation.select()\
                                .where(Donation.name == name)\
                                .order_by(Donation.id.desc())\
                                .get().amount
        return f"Dear {name},\n" \
               f"Thank you very much for your generous donation of ${last_donation:,.2f}.\n" \
               f"Sincerely,\n" \
               f"PYTHON220 Class of 2019"

    @classmethod
    def send_all_letters(cls, dir_name):
        if not isdir(dir_name):
            mkdir(dir_name)

        query = Donor.select()

        for donor in query:
            file_name = dir_name + '/' + donor.name.replace(',', '').replace(' ', '_') + '.txt'
            with open(file_name, 'w') as f:
                f.write(Donation.thank_you_letter(donor.name))


    @classmethod
    def summary_report(cls):
        query = Donor.select(Donor,
                             fn.COUNT(Donation.amount).alias('count'),
                             fn.SUM(Donation.amount).alias('sum')) \
            .join(Donation) \
            .group_by(Donor) \
            .order_by(-fn.SUM(Donation.amount))

        report = "DONOR NAME             TOTAL DONATED   NUM DONATIONS   AVG DONATION\n"
        for item in query:
            report += f"{item.name:20s}   ${item.sum:12,.2f} {item.count:3d}" \
                    + f"               ${item.sum/item.count:11,.2f}\n"
        return report


    @classmethod
    def challenge(cls, factor, min_donation=None, max_donation=None):
        query = Donation.select()
        if min_donation:
            query = query.select().where(Donation.amount >= min_donation)
        if max_donation:
            query = query.select().where(Donation.amount <= max_donation)
        query = query.select(Donation.name,
                             Donation.amount,
                             fn.SUM(Donation.amount).alias('sum')) \
                     .group_by(Donation.name) \
                     .order_by(Donation.id.asc())

        total = 0
        report = ""
        for d in query:
            report += f"   {d.name}: ${factor*float(d.sum):,.2f} = " \
                    + f"{factor} * ${float(d.sum):,.2f}\n"
            total += factor * float(d.sum)
        report += f"\n   Total contribution required: ${total:,.2f}\n"
        return report


    @classmethod
    def close_db(cls):
        database.close()

def create_default_db():
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    database.init('donations.db')
    database.connect()
    database.execute_sql('PRAGMA foreign_keys = ON;')
    database.create_tables([
        Donor,
        Donation
    ])

    donors = [
        'William Gates, III',
        'Jeff Bezos',
        'Paul Allen',
        'Mark Zuckerberg',
        'Colleen Kaku'
    ]

    NAME = 0
    AMOUNT = 1
    donations = [
        ('William Gates, III', 653772.32),
        ('William Gates, III', 12.17),
        ('Jeff Bezos', 877.33),
        ('Paul Allen', 663.23),
        ('Paul Allen', 43.87),
        ('Paul Allen', 1.32),
        ('Mark Zuckerberg', 1663.23),
        ('Mark Zuckerberg', 4300.87),
        ('Mark Zuckerberg', 10432.0),
        ('Colleen Kaku', 50000),
        ('Colleen Kaku', 1000000),
    ]

    for donor in donors:
        try:
            with database.transaction():
                Donor.create(name=donor)
        except Exception as e:
            logger.info(f'Error creating = {donor}, ' + str(e))

    logger.info('Print all Donor records...')
    for saved_donor in Donor:
        logger.info(f'{saved_donor.name}')


    for donation in donations:
        try:
            with database.transaction():
                Donation.create(amount=donation[AMOUNT], name=donation[NAME])

        except Exception as e:
            logger.info(f'Error creating = {donation}, ' + str(e))

    logger.info('Print all Donation records...')
    for saved_donation in Donation:
        logger.info(f'{saved_donation.name} donated {saved_donation.amount}')

    logger.info('database closes')
    database.close()

if __name__ == '__main__':
    create_default_db()
