found 104410 words in file sherlock.txt
trigram dict has 55638 entries
Wrote new trigram doc to new_sherlock.txt

Filename: trigram.py

Line #    Mem usage    Increment   Line Contents
================================================
     6   43.465 MiB   43.465 MiB   @profile
     7                             def strip_punctuation(in_string):
     8                                 """
     9                                 Return a new version of the given string, stripped of punctionation
    10                                 """
    11   43.465 MiB    0.000 MiB       stripped_text = ""
    12   43.465 MiB    0.062 MiB       for c in in_string:
    13   43.461 MiB    0.008 MiB           if c in '!,.?()[]:;':
    14   43.461 MiB    0.000 MiB               c = ""
    15   43.461 MiB    0.062 MiB           stripped_text += c
    16   43.465 MiB    0.000 MiB       return stripped_text


Filename: trigram.py

Line #    Mem usage    Increment   Line Contents
================================================
    18   36.402 MiB   36.402 MiB   @profile
    19                             def get_words_from_file(file):
    20                                 """
    21                                 Return an ordered list of words read from the given file
    22                                 """
    23   36.402 MiB    0.000 MiB       word_list = []
    24   36.402 MiB    0.000 MiB       f = open(file, 'r')
    25   36.402 MiB    0.000 MiB       while True:
    26                                     # read in each line, stripping punctuation since those characters aren't
    27                                     # aren't really part of the words
    28   43.465 MiB   43.465 MiB           next_line = strip_punctuation(f.readline().strip('\r'))
    29   43.465 MiB    0.000 MiB           if not next_line:
    30   43.465 MiB    0.000 MiB               break
    31   43.465 MiB    0.781 MiB           word_list.extend(next_line.split())
    32   43.465 MiB    0.000 MiB       return word_list


Filename: trigram.py

Line #    Mem usage    Increment   Line Contents
================================================
    34   43.465 MiB   43.465 MiB   @profile
    35                             def create_trigram_dict(word_list):
    36                                 """
    37                                 Create and return a trigram dict from the given word list, which is a dict
    38                                 with a key of a two-word string and the list of words that follow it in the list
    39                                 """
    40   43.465 MiB    0.000 MiB       trigram_dict = dict()
    41                                 # iterate through word list, adding each word to the dict array associated with the
    42                                 # key based on the previous two words
    43   55.234 MiB    0.062 MiB       for i in range(len(word_list)-2):
    44   55.234 MiB    0.062 MiB           word_pair = " ".join(word_list[i:i+2])
    45   55.234 MiB    1.254 MiB           trigram_list = trigram_dict.setdefault(word_pair, [])
    46   55.234 MiB    0.062 MiB           if not word_list[i+2] in trigram_list:
    47   55.234 MiB    0.062 MiB               trigram_list.append(word_list[i+2])
    48   55.234 MiB    0.000 MiB       return trigram_dict


Filename: trigram.py

Line #    Mem usage    Increment   Line Contents
================================================
    50   55.234 MiB   55.234 MiB   @profile
    51                             def create_trigram_out(trigram_dict, out_filename):
    52                                 """
    53                                 For the given trigram dict, create a new trigram based on a random key from the dict,
    54                                 and write it out to the given file name
    55                                 """
    56   55.234 MiB    0.000 MiB       out_file = open(out_filename, 'a')
    57                                 # get random 2-word pair to start trigram with
    58   55.234 MiB    0.000 MiB       next_pair = random.choice(list(trigram_dict.keys())).split(' ')
    59                                 # create the trigram key, the two words in a single string separated by a space
    60   55.234 MiB    0.000 MiB       next_key = "{} {}".format(next_pair[0], next_pair[1])
    61                                 # write the first pair to the file
    62   55.234 MiB    0.000 MiB       out_file.write(next_key + ' ')
    63   55.270 MiB    0.000 MiB       while next_key in trigram_dict:
    64                                     # iterate as long as the word pair key is in the trigram dict, adding the next word
    65                                     # from the trigram to the output file, and resetting the key pair to the next two words
    66   55.270 MiB    0.000 MiB           next_word = random.choice(trigram_dict[next_key])
    67   55.270 MiB    0.004 MiB           out_file.write(next_word + ' ')
    68   55.270 MiB    0.000 MiB           next_pair = [next_pair[1], next_word]
    69   55.270 MiB    0.000 MiB           next_key = "{} {}".format(next_pair[0], next_pair[1])
    70                                 # terminate file with a line feed
    71   55.246 MiB    0.000 MiB       out_file.write("\n")



